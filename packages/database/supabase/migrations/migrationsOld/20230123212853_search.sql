-- Updated searchEntity ENUM without 'Supplier' and 'Customer'
CREATE TYPE "searchEntity" AS ENUM (
  'Resource', 'Person', 'Job', 'Part', 'Purchase Order', 'Lead', 'Opportunity',
  'Quotation', 'Sales Order', 'Request for Quotation', 'Sales Invoice', 'Purchase Invoice', 'Document'
);

-- Search table definition
CREATE TABLE search (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name TEXT NOT NULL,
  description TEXT DEFAULT '',
  entity "searchEntity",
  uuid TEXT,
  link TEXT NOT NULL,
  "companyId" TEXT NOT NULL,

  CONSTRAINT search_uuid_unique UNIQUE ("uuid", "companyId"),
  CONSTRAINT search_companyId_fkey FOREIGN KEY ("companyId") REFERENCES "company"("id") ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE INDEX "search_companyId_idx" ON "search" ("companyId");

ALTER TABLE public.search
ADD COLUMN fts tsvector GENERATED ALWAYS AS (to_tsvector('english', name || ' ' || description)) STORED;

CREATE INDEX index_search_uuid ON public.search (uuid);
CREATE INDEX index_search_fts ON public.search USING GIN (fts); 
CREATE INDEX index_search_companyId ON public.search ("companyId");

-- Employee Search Functions and Triggers

CREATE FUNCTION public.create_employee_search_result()
RETURNS TRIGGER AS $$
DECLARE
  employee TEXT;
BEGIN
  employee := (SELECT u."fullName" FROM public.user u WHERE u.id = NEW.id);
  INSERT INTO public.search(name, entity, uuid, link, "companyId")
  VALUES (employee, 'Person', NEW.id, '/x/person/' || NEW.id, NEW."companyId");
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER create_employee_search_result
  AFTER INSERT ON public.employee
  FOR EACH ROW EXECUTE PROCEDURE public.create_employee_search_result();

CREATE FUNCTION public.update_employee_search_result()
RETURNS TRIGGER AS $$
BEGIN
  IF (NEW.active = FALSE) THEN
    DELETE FROM public.search
    WHERE entity = 'Person' AND uuid = NEW.id;
    RETURN NEW;
  END IF;
  IF (OLD."fullName" <> NEW."fullName") THEN
    UPDATE public.search SET name = NEW."fullName"
    WHERE entity = 'Person' AND uuid = NEW.id;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER update_employee_search_result
  AFTER UPDATE ON public.user
  FOR EACH ROW EXECUTE PROCEDURE public.update_employee_search_result();

-- Enable Row-Level Security and Policies

ALTER TABLE "search" ENABLE ROW LEVEL SECURITY;

-- Policies

CREATE POLICY "Employees with resources_view can search for resources" ON "search"
  FOR SELECT
  USING (has_company_permission('resources_view', "companyId") AND entity = 'Resource');

CREATE POLICY "Employees with resources_view can search for people" ON "search"
  FOR SELECT
  USING (has_company_permission('resources_view', "companyId") AND entity = 'Person');

-- Policy for documents
CREATE POLICY "Employees with document_view can search for documents" ON "search"
  FOR SELECT
  USING (has_company_permission('document_view', "companyId") AND entity = 'Document' AND has_role('employee'));

-- Policy for parts
CREATE POLICY "Employees with parts_view can search for parts" ON "search"
  FOR SELECT
  USING (has_company_permission('parts_view', "companyId") AND entity = 'Part' AND has_role('employee'));

-- Policy for jobs
CREATE POLICY "Employees with jobs_view can search for jobs" ON "search"
  FOR SELECT
  USING (has_company_permission('jobs_view', "companyId") AND entity = 'Job' AND has_role('employee'));

-- Other Policies and TODOs
-- (No changes needed here unless they reference removed tables)
