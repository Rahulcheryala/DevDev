// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "views", "multiSchema", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_DIRECT_POSTGRES_URL")
}

model departments {
  id                 String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  companyId          String    @db.Uuid
  name               String
  departmentCode     String
  description        String?
  metadata           Json?
  logo               String?
  status             String    @default("Active")
  createdAt          DateTime  @default(now()) @db.Timestamptz()
  createdBy          String    @db.Uuid
  updatedAt          DateTime? @db.Timestamptz()
  lastUpdatedBy      String?   @db.Uuid
  deletedAt          DateTime? @db.Timestamptz()
  deletedBy          String?   @db.Uuid
  version            Int       @default(1)
  isArchived         Boolean   @default(false)
  syncToken          String?   @db.Uuid
  effectiveStartDate DateTime?
  effectiveEndDate   DateTime?
  supervisor         String?   @db.Uuid

  supervisorUser  employeeMaster?    @relation(fields: [supervisor], references: [id])
  departmentUsers empOrgAssignment[]
}

model employeeMaster {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  firstName        Bytes
  lastName         Bytes
  middleName       Bytes?
  email            Bytes?
  phoneNumber      Bytes?
  dateOfBirth      Bytes?
  gender           Bytes?
  nationality      Bytes?
  maritalStatus    Bytes?
  employmentStatus Bytes
  hireDate         Bytes
  terminationDate  Bytes?
  employeeTypeId   String    @db.Uuid
  companyId        String    @db.Uuid
  primaryCompanyId String?   @db.Uuid
  createdAt        DateTime  @default(now()) @db.Timestamptz()
  createdBy        String    @db.Uuid
  updatedAt        DateTime? @db.Timestamptz()
  lastUpdatedBy    String?   @db.Uuid
  deletedAt        DateTime? @db.Timestamptz()
  deletedBy        String?   @db.Uuid
  syncData         Json?

  // Relations
  teamUsers             teamUsers[] // Teams relation through teamUsers
  ledTeams              teams[] // Teams where this employee is the leader
  departmentsSupervised departments[]
  departments           empOrgAssignment[] @relation("EmployeeAssignment")

  @@index([companyId])
  @@index([employeeTypeId])
}

enum VerificationStatus {
  Verified
  Unverified
  Pending
}

model addressMaster {
  addressId        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  contextId        Int
  address1         String?
  address2         String?
  city             String?
  state            String?
  postalCode       String?
  country          String?
  county           String?
  isRestricted     Boolean   @default(false)
  latitude         Decimal?  @db.Decimal(10, 8)
  longitude        Decimal?  @db.Decimal(11, 8)
  googlePlaceId    String?
  formattedAddress String?
  isActive         Boolean   @default(true)
  validFrom        DateTime? @db.Timestamptz()
  validTo          DateTime? @db.Timestamptz()
  companyId        String    @db.Uuid
  createdAt        DateTime  @default(now()) @db.Timestamptz()
  createdBy        String    @db.Uuid
  lastUpdatedAt    DateTime? @db.Timestamptz()
  lastUpdatedBy    String?   @db.Uuid
  deletedAt        DateTime? @db.Timestamptz()
  deletedBy        String?   @db.Uuid
}

model contactMaster {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  firstName       Bytes
  firstNameSearch String?
  lastName        Bytes
  lastNameSearch  String?
  email           Bytes?
  emailSearch     String?
  phone           Bytes?
  phoneSearch     String?
  createdAt       DateTime  @default(now()) @db.Timestamptz()
  createdBy       String    @db.Uuid
  updatedAt       DateTime? @db.Timestamptz()
  lastUpdatedBy   String?   @db.Uuid
  deletedAt       DateTime? @db.Timestamptz()
  deletedBy       String?   @db.Uuid
  syncData        Json?
}

model teams {
  id            String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  companyId     String    @db.Uuid
  imageUrl      String?
  name          String
  description   String?
  status        String?
  teamCode      String
  parentTeamId  String?   @db.Uuid
  teamLeaderId  String?   @db.Uuid
  userCount     Int?      @default(0)
  visibility    String?
  metadata      Json?
  createdAt     DateTime  @default(now()) @db.Timestamptz
  createdBy     String    @db.Uuid
  updatedAt     DateTime? @db.Timestamptz
  lastUpdatedBy String?   @db.Uuid
  endDate       DateTime?
  startDate     DateTime?
  deletedAt     DateTime? @db.Timestamptz
  deletedBy     String?   @db.Uuid
  version       Int       @default(1)
  isArchived    Boolean   @default(false)
  syncToken     String?   @db.Uuid

  // Relations
  teamUsers  teamUsers[]
  childTeams teams[]         @relation("TeamHierarchy")
  parentTeam teams?          @relation("TeamHierarchy", fields: [parentTeamId], references: [id])
  teamLeader employeeMaster? @relation(fields: [teamLeaderId], references: [id])

  // User relations for audit fields
  // createdByUser     user  @relation("TeamCreatedBy", fields: [createdBy], references: [id])
  // lastUpdatedByUser user? @relation("TeamLastUpdatedBy", fields: [lastUpdatedBy], references: [id])
  // deletedByUser     user? @relation("TeamDeletedBy", fields: [deletedBy], references: [id])

  @@index([companyId])
  @@index([isArchived])
  @@index([parentTeamId])
  @@index([status])
  @@index([teamLeaderId])
  @@index([visibility])
}

model teamUsers {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  teamId         String    @db.Uuid
  userId         String    @db.Uuid
  role           String
  isActive       Boolean   @default(true)
  addedAt        DateTime  @default(now()) @db.Timestamptz
  addedBy        String    @db.Uuid
  removedAt      DateTime? @db.Timestamptz
  removedBy      String?   @db.Uuid
  lastActivityAt DateTime? @db.Timestamptz
  notes          String?   @db.Text
  syncToken      String?   @db.Uuid

  team teams           @relation(fields: [teamId], references: [id])
  user employeeMaster? @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@index([isActive])
  @@index([role])
  @@index([teamId])
  @@index([userId])
  @@map("teamUsers")
}

model MasterList {
  id            String   @id @default(uuid()) @map("id")
  name          String   @map("name")
  code          String?  @map("code")
  description   String?  @map("description")
  isActive      Boolean  @map("isActive")
  createdAt     DateTime @default(now()) @map("createdAt")
  createdBy     String   @map("createdBy")
  inactivatedAt DateTime? @map("inactivatedAt")
  inactivatedBy String?  @map("inactivatedBy")
  purpose       String?  @map("purpose")
  metadata      Json?    @map("metadata")
  type          String?  @map("type") @default("user defined")
  syncToken     String?  @map("syncToken")
  updatedAt     DateTime? @map("updatedAt")
  lastUpdatedBy String?  @map("lastUpdatedBy")
  deletedAt     DateTime? @map("deletedAt")
  deletedBy     String?  @map("deletedBy")
  startDate     DateTime? @map("startDate")
  endDate       DateTime? @map("endDate")
  companies     String[]  @map("companies")


  masterListMappings masterListMapping[]

  @@map("masterList")
}


model MasterListValue {
  id            String   @id @default(uuid())
  masterListId  String   @db.Uuid
  value         String
  displayName   String?
  description   String?
  meaning       String?
  sequence      Int?
  isActive      Boolean  @default(true)
  editable      Boolean  @default(true)
  image         String?
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  createdBy     String   @db.Uuid
  updatedAt     DateTime?
  lastUpdatedBy String?  @db.Uuid
  syncToken     String?  @db.Uuid
  deletedAt     DateTime?
  deletedBy     String?  @db.Uuid
  


  @@map("masterListValue")
}

model masterListMapping {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  createdBy String   @db.Uuid
  company   String   @db.Uuid
  deletedAt DateTime?
  deletedBy String?  @db.Uuid
  status        Boolean  @default(true)
  module        String?
  field         String?
  masterListId  String   @db.Uuid
  masterList    MasterList @relation(fields: [masterListId], references: [id])


  @@map("masterListMapping")
}

model user {
  id           String    @id @db.Uuid
  email        String    @unique
  firstName    String
  lastName     String
  fullName     String    @db.Text // Note: This is computed in DB but needs to be kept in sync
  about        String    @default("")
  phno         String    @default("")
  address1     String    @default("")
  address2     String    @default("")
  city         String    @default("")
  state        String    @default("")
  zipCode      String    @default("")
  country      String    @default("")
  avatarUrl    String?
  active       Boolean   @default(true)
  twoFAEnabled Boolean   @default(false) @map("2FAEnabled")
  birthday     DateTime? @db.Date
  permissions  Json      @default("{}")
  createdAt    DateTime  @default(now()) @db.Timestamptz
  updatedAt    DateTime? @db.Timestamptz

  // Integration relations
  testedIntegrations  IntegrationsMaster[] @relation("TestedByRelation")
  createdIntegrations IntegrationsMaster[] @relation("CreatedByRelation")
  updatedIntegrations IntegrationsMaster[] @relation("UpdatedByRelation")
  deletedIntegrations IntegrationsMaster[] @relation("DeletedByRelation")

  testedConnections  IntegrationConnections[] @relation("TestedByRelation")
  createdConnections IntegrationConnections[] @relation("CreatedByRelation")
  updatedConnections IntegrationConnections[] @relation("UpdatedByRelation")
  deletedConnections IntegrationConnections[] @relation("DeletedByRelation")

  associatedCredentials IntegrationCreds[] @relation("AssociatedUserRelation")
  createdCredentials    IntegrationCreds[] @relation("CreatedByRelation")
  updatedCredentials    IntegrationCreds[] @relation("UpdatedByRelation")
  deletedCredentials    IntegrationCreds[] @relation("DeletedByRelation")

  createdParameters IntegrationParameters[] @relation("CreatedByRelation")
  updatedParameters IntegrationParameters[] @relation("UpdatedByRelation")
  deletedParameters IntegrationParameters[] @relation("DeletedByRelation")

  initiatedLogs IntegrationLogs[] @relation("InitiatedByRelation")
  createdLogs   IntegrationLogs[] @relation("CreatedByRelation")
  updatedLogs   IntegrationLogs[] @relation("UpdatedByRelation")
  deletedLogs   IntegrationLogs[] @relation("DeletedByRelation")

  createdCategoryMappings IntegrationCategoryMapping[] @relation("MappingCreatedByRelation")
  updatedCategoryMappings IntegrationCategoryMapping[] @relation("MappingUpdatedByRelation")

  // relations to companyMaster
  companiesAsPrimaryContact CompanyMaster[] @relation("PrimaryContactRelation")
  createdCompanies          CompanyMaster[] @relation("CompanyCreatedByRelation")
  updatedCompanies          CompanyMaster[] @relation("CompanyUpdatedByRelation")
  deletedCompanies          CompanyMaster[] @relation("CompanyDeletedByRelation")

  @@index([fullName])
}

model empOrgAssignment {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  employeeId    String    @db.Uuid
  companyId     String    @db.Uuid
  departmentId  String?   @db.Uuid
  positionId    String?   @db.Uuid
  locationId    String?   @db.Uuid
  managerId     String?   @db.Uuid
  startDate     DateTime? @db.Date
  endDate       DateTime? @db.Date
  createdAt     DateTime  @default(now()) @db.Timestamptz
  createdBy     String    @db.Uuid
  updatedAt     DateTime? @db.Timestamptz
  lastUpdatedBy String?   @db.Uuid
  deletedAt     DateTime? @db.Timestamptz
  deletedBy     String?   @db.Uuid
  syncData      Json?

  // Relations
  employee   employeeMaster @relation("EmployeeAssignment", fields: [employeeId], references: [id])
  department departments?   @relation(fields: [departmentId], references: [id])
}

enum CompanyStatus {
  Active
  Inactive

  @@map("public.companyStatus")
}

model CompanyMaster {
  id                   String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tenantId             String        @db.Uuid
  name                 String
  description          String?
  companyCode          String?
  industry             String?
  companyType          String?       @db.Uuid
  dnbNumber            String?
  bbbNumber            String?
  taxId                String?
  registrationNumber   String?
  registeredState      String?
  registeredCountry    String?
  website              String?
  phoneNumber          String?
  email                String?
  primaryContactId     String?       @db.Uuid
  fiscalYearStart      DateTime?     @db.Date
  fiscalYearEnd        DateTime?     @db.Date
  effectivityStartDate DateTime?     @db.Date
  effectivityEndDate   DateTime?     @db.Date
  parentCompanyId      String?       @db.Uuid
  isActive             Boolean?
  purpose              String?
  ownershipType        String?       @db.Uuid
  employeeCount        Int?
  annualRevenue        Decimal?      @db.Decimal(15, 2)
  currency             String?
  status               CompanyStatus @default(Active)
  createdAt            DateTime      @default(now()) @db.Timestamptz
  createdBy            String?       @db.Uuid
  updatedAt            DateTime?     @db.Timestamptz
  lastUpdatedBy        String?       @db.Uuid
  deletedAt            DateTime?     @db.Timestamptz
  deletedBy            String?       @db.Uuid
  domainUrl            String?

  // Relations
  parentCompany     CompanyMaster?  @relation("CompanyHierarchy", fields: [parentCompanyId], references: [id])
  childCompanies    CompanyMaster[] @relation("CompanyHierarchy")
  primaryContact    user?           @relation("PrimaryContactRelation", fields: [primaryContactId], references: [id])
  createdByUser     user?           @relation("CompanyCreatedByRelation", fields: [createdBy], references: [id])
  lastUpdatedByUser user?           @relation("CompanyUpdatedByRelation", fields: [lastUpdatedBy], references: [id])
  deletedByUser     user?           @relation("CompanyDeletedByRelation", fields: [deletedBy], references: [id])

  @@map("public.companyMaster")
}

enum ApplicationName {
  Microsoft_Dynamics_365 @map("Microsoft Dynamics 365")
  Office_365             @map("Office 365")
  Azure_DevOps           @map("Azure DevOps")
  Salesforce             @map("Salesforce")
  Slack                  @map("Slack")

  @@map("applicationName")
}

enum IntegrationType {
  System       @map("System")
  User_Defined @map("User Defined")

  @@map("integrationType")
}

enum IntegrationCategory {
  ERP                @map("ERP")
  CRM                @map("CRM")
  Project_Management @map("Project Management")
  Productivity       @map("Productivity")
  Communication      @map("Communication")

  @@map("integrationCategory")
}

enum ConnectionType {
  API  @map("API")
  SOAP @map("SOAP")
  REST @map("REST")

  @@map("connectionType")
}

enum Status {
  Active     @map("Active")
  Inactive   @map("Inactive")
  Blocked    @map("Blocked")
  Draft      @map("Draft")
  Deprecated @map("Deprecated")
  Error      @map("Error")

  @@map("status")
}

enum LastTestResult {
  Success @map("Success")
  Failure @map("Failure")
  Pending @map("Pending")

  @@map("lastTestResult")
}

enum ExecutionFrequency {
  On_Demand @map("On-Demand")
  Batch     @map("Batch")
  Scheduled @map("Scheduled")

  @@map("executionFrequency")
}

enum ConnectionStatus {
  Online   @map("Online")
  Offline  @map("Offline")
  Error    @map("Error")
  Draft    @map("Draft")

  @@map("connectionStatus")
}

enum ConnectionEnvType {
  PROD    @map("PROD")
  SANDBOX @map("SANDBOX")
  DEV     @map("DEV")
  TEST    @map("TEST")

  @@map("environmentType")
}

enum AuthType {
  Basic_Auth @map("Basic Auth")
  OAuth2     @map("OAuth2")
  API_Key     @map("API Key")
  PAT        @map("PAT")

  @@map("authType")
}

enum EncryptionAlgorithm {
  AES    @map("AES")
  RSA    @map("RSA")
  SHA256 @map("SHA256")

  @@map("encryptionAlgorithm")
}

enum CredentialStatus {
  Active  @map("Active")
  Expired @map("Expired")
  Revoked @map("Revoked")
  Pending @map("Pending")

  @@map("credentialStatus")
}

enum ParameterName {
  TOKEN_URL      @map("TOKEN_URL")
  CLIENT_ID      @map("CLIENT_ID")
  CLIENT_SECRET  @map("CLIENT_SECRET")
  AUTH_CODE      @map("AUTH_CODE")
  REFRESH_TOKEN  @map("REFRESH_TOKEN")
  API_KEY        @map("API_KEY")
  API_SECRET     @map("API_SECRET")
  API_KEY_ID     @map("API_KEY_ID")
  API_KEY_SECRET @map("API_KEY_SECRET")

  @@map("parameterName")
}

enum ParameterType {
  String  @map("String")
  Number  @map("Number")
  Boolean @map("Boolean")
  Object  @map("Object")
  Array   @map("Array")

  @@map("parameterType")
}

enum ParameterStatus {
  Active     @map("Active")
  Deprecated @map("Deprecated")

  @@map("parameterStatus")
}

enum ReferenceType {
  integration @map("integration")
  connection  @map("connection")

  @@map("referenceType")
}

enum EventType {
  connected    @map("connected")
  disconnected @map("disconnected")
  error        @map("error")
  retry        @map("retry")

  @@map("eventType")
}

enum EventStatus {
  success @map("success")
  failure @map("failure")

  @@map("eventStatus")
}

// model ConnectionDetails {
//   id                     String                   @id @default(uuid()) @db.Uuid
//   environmentType        EnvironmentType
//   environmentURL         String
//   maxRetries             Int
//   timeout                Int
//   retryDelay             Int

//   IntegrationConnections IntegrationConnections[]
// }

model IntegrationCategoryMapping {
  id                     String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  applicationNamePattern ApplicationName
  allowedCategory        IntegrationCategory
  description            String?
  createdAt              DateTime            @default(now()) @db.Timestamptz
  createdBy              String?             @db.Uuid
  updatedAt              DateTime?           @db.Timestamptz
  lastUpdatedBy          String?             @db.Uuid

  // Relations
  createdByUser     user? @relation("MappingCreatedByRelation", fields: [createdBy], references: [id])
  lastUpdatedByUser user? @relation("MappingUpdatedByRelation", fields: [lastUpdatedBy], references: [id])

  @@map("integrationCategoryMapping")
}

model IntegrationsMaster {
  id                  String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  integrationName     String              @unique
  applicationName     ApplicationName // Added to match the migration file
  integrationCode     String              @unique
  logo                String?
  description         String?
  isFavorite          Boolean             @default(false)
  integrationType     IntegrationType     @default(User_Defined)
  integrationCategory IntegrationCategory
  connectionType      ConnectionType
  authType            AuthType
  connectionLimit     Int
  copies              Int                 @default(0)
  status              Status
  companyIds          String[]            @db.Uuid // Changed from Json to UUID array
  tags                Json?  //TODO(vamsi): change to string array
  isTested            Boolean             @default(false)
  lastTestedAt        DateTime?           @db.Timestamptz
  lastTestedBy        String?             @db.Uuid
  lastTestResult      LastTestResult?
  createdAt           DateTime            @default(now()) @db.Timestamptz
  createdBy           String              @db.Text // Can be a UUID or 'System'
  updatedAt           DateTime?           @db.Timestamptz
  lastUpdatedBy       String?             @db.Uuid
  deletedAt           DateTime?           @db.Timestamptz
  deletedBy           String?             @db.Uuid
  syncToken           String              @db.Uuid

  // Relations
  connections       IntegrationConnections[]
  credentials       IntegrationCreds[]
  parameters        IntegrationParameters[]
  logs              IntegrationLogs[]        @relation("IntegrationLogs")
  lastTestedByUser  user?                    @relation("TestedByRelation", fields: [lastTestedBy], references: [id])
  createdByUser     user?                    @relation("CreatedByRelation", fields: [createdBy], references: [id])
  lastUpdatedByUser user?                    @relation("UpdatedByRelation", fields: [lastUpdatedBy], references: [id])
  deletedByUser     user?                    @relation("DeletedByRelation", fields: [deletedBy], references: [id])

  @@map("integrationsMaster")
}

model IntegrationConnections {
  id                    String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  integrationId         String             @db.Uuid
  connectionName        String             @unique
  connectionCode        String             @unique
  connectionDescription String?
  companyIds            String[]           @db.Uuid
  isEnabled              Boolean            @default(false)
  connectionDetails     Json  // TODO(vamsi): Add a compositie data type for connection details
  executionFrequency    ExecutionFrequency
  connectionStatus      ConnectionStatus
  copies                Int                @default(0)
  isTested              Boolean            @default(false)
  lastTestedAt          DateTime?          @db.Timestamptz
  lastTestedBy          String?            @db.Uuid
  lastTestResult        LastTestResult?
  createdAt             DateTime           @default(now()) @db.Timestamptz
  createdBy             String             @db.Text // Can be a UUID or 'System'
  updatedAt             DateTime?          @db.Timestamptz
  lastUpdatedBy         String?            @db.Uuid
  deletedAt             DateTime?          @db.Timestamptz
  deletedBy             String?            @db.Uuid
  syncToken             String             @db.Uuid

  // Relations
  integration       IntegrationsMaster @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  logs              IntegrationLogs[]  @relation("ConnectionLogs")
  lastTestedByUser  user?              @relation("TestedByRelation", fields: [lastTestedBy], references: [id])
  createdByUser     user               @relation("CreatedByRelation", fields: [createdBy], references: [id])
  lastUpdatedByUser user?              @relation("UpdatedByRelation", fields: [lastUpdatedBy], references: [id])
  deletedByUser     user?              @relation("DeletedByRelation", fields: [deletedBy], references: [id])

  @@map("integrationConnections")
}

model IntegrationCreds {
  id                 String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  integrationId      String               @db.Uuid
  credentials        Json?
  encryptionAlgorithm EncryptionAlgorithm?
  credentialStatus   CredentialStatus     @default(Active)
  policy             Json?
  validFrom          DateTime?            @db.Timestamptz
  validTo            DateTime?            @db.Timestamptz
  issuer             String?              @db.VarChar(255)
  associatedUser     String?              @db.Uuid
  scopes             Json?
  refreshToken       Json?
  tokenCache         Json?
  lastUsedAt         DateTime?            @db.Timestamptz
  lastFailedAuthAt   DateTime?            @db.Timestamptz
  failedAuthCount    Int?
  credentialNotes    String?
  createdAt          DateTime             @default(now()) @db.Timestamptz
  createdBy          String               @db.Text // Can be a UUID or 'System'
  updatedAt          DateTime?            @db.Timestamptz
  lastUpdatedBy      String?              @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz
  deletedBy          String?              @db.Uuid
  syncToken          String               @db.Uuid

  // Relations
  integration       IntegrationsMaster @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  associatedUserRel user?              @relation("AssociatedUserRelation", fields: [associatedUser], references: [id])
  createdByUser     user               @relation("CreatedByRelation", fields: [createdBy], references: [id])
  lastUpdatedByUser user?              @relation("UpdatedByRelation", fields: [lastUpdatedBy], references: [id])
  deletedByUser     user?              @relation("DeletedByRelation", fields: [deletedBy], references: [id])

  @@map("integrationCreds")
}

model IntegrationParameters {
  id              String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  integrationId   String          @db.Uuid
  parameterName   ParameterName
  parameterValue  String?
  valueType       ParameterType
  isSensitive     Boolean         @default(false)
  parameterStatus ParameterStatus
  companyId       Json
  createdAt       DateTime        @default(now()) @db.Timestamptz
  createdBy       String          @db.Uuid
  updatedAt       DateTime?       @db.Timestamptz
  lastUpdatedBy   String?         @db.Uuid
  deletedAt       DateTime?       @db.Timestamptz
  deletedBy       String?         @db.Uuid
  syncToken       String          @db.Uuid

  // Relations
  integration       IntegrationsMaster @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  createdByUser     user               @relation("CreatedByRelation", fields: [createdBy], references: [id])
  lastUpdatedByUser user?              @relation("UpdatedByRelation", fields: [lastUpdatedBy], references: [id])
  deletedByUser     user?              @relation("DeletedByRelation", fields: [deletedBy], references: [id])

  @@unique([parameterName, integrationId])
  @@map("integrationParameters")
}

model IntegrationLogs {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  referenceId     String        @db.Uuid
  referenceType   ReferenceType
  eventType       EventType
  eventTime       DateTime      @default(now()) @db.Timestamptz
  responseCode    Int?
  requestPayload  Json?
  responsePayload Json?
  initiatedBy     String?       @db.Uuid
  details         String?
  eventStatus     EventStatus
  createdAt       DateTime      @default(now()) @db.Timestamptz
  createdBy       String        @db.Uuid
  updatedAt       DateTime?     @default(now()) @db.Timestamptz
  lastUpdatedBy   String?       @db.Uuid
  deletedAt       DateTime?     @db.Timestamptz
  deletedBy       String?       @db.Uuid
  syncToken       String        @db.Uuid

  // Relations - using a custom approach for polymorphic relationship
  integration       IntegrationsMaster?     @relation("IntegrationLogs", fields: [referenceId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "integrationLogs_integration_fkey")
  connection        IntegrationConnections? @relation("ConnectionLogs", fields: [referenceId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "integrationLogs_connection_fkey")
  initiatedByUser   user?                   @relation("InitiatedByRelation", fields: [initiatedBy], references: [id])
  createdByUser     user                    @relation("CreatedByRelation", fields: [createdBy], references: [id])
  lastUpdatedByUser user?                   @relation("UpdatedByRelation", fields: [lastUpdatedBy], references: [id])
  deletedByUser     user?                   @relation("DeletedByRelation", fields: [deletedBy], references: [id])

  @@map("integrationLogs")
}

